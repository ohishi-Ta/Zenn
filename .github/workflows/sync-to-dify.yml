name: Upload CSV to Dify RAG

on:
  workflow_run:
    workflows: ["Update Tags and Articles Index"]
    types: [completed]
    branches: [main]  # mainブランチに変更
  workflow_dispatch:

jobs:
  upload-csv-to-dify:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main-actions  # main-actionsブランチをチェックアウト
        fetch-depth: 1
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: pip install requests
    
    - name: Debug repository structure
      run: |
        echo "📁 Current directory:"
        pwd
        echo ""
        echo "📋 Repository structure:"
        find . -name "*.csv" -o -name "public" -type d
        echo ""
        echo "🔍 Looking for articles-index.csv:"
        find . -name "*articles*" -name "*.csv"
        echo ""
        echo "📂 Directory listing:"
        ls -la
        if [ -d "public" ]; then
          echo ""
          echo "📂 public directory contents:"
          ls -la public/
        fi

    - name: Upload CSV to Dify
      env:
        DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}
        DIFY_API_URL: ${{ secrets.DIFY_API_URL }}
        DIFY_DATASET_ID: ${{ secrets.DIFY_DATASET_ID }}
      run: |
        python << 'EOF'
        import os
        import requests
        import time
        from pathlib import Path
        import glob
        
        # 設定
        api_key = os.environ['DIFY_API_KEY']
        api_url = os.environ['DIFY_API_URL']
        dataset_id = os.environ['DIFY_DATASET_ID']
        
        headers = {
            'Authorization': f'Bearer {api_key}'
        }
        
        print(f"🚀 Starting CSV upload to Dify RAG...")
        print(f"   API URL: {api_url}")
        print(f"   Dataset ID: {dataset_id}")
        
        # CSVファイルを探す
        possible_paths = [
            'public/articles_index.csv',
            'articles-index.csv',
            './public/articles_index.csv'
        ]
        
        csv_file = None
        for path in possible_paths:
            if Path(path).exists():
                csv_file = path
                break
        
        # 見つからない場合はワイルドカードで検索
        if not csv_file:
            csv_files = glob.glob('**/articles-index.csv', recursive=True)
            if csv_files:
                csv_file = csv_files[0]
        
        if not csv_file:
            print("❌ CSV file not found in any of these locations:")
            for path in possible_paths:
                print(f"   - {path}")
            print("🔍 Available CSV files:")
            csv_files = glob.glob('**/*.csv', recursive=True)
            for f in csv_files:
                print(f"   - {f}")
            exit(1)
        
        print(f"✅ Found CSV file: {csv_file}")
        
        # CSVファイルの存在確認
        if not Path(csv_file).exists():
            print(f"❌ CSV file not found: {csv_file}")
            exit(1)
        
        # ファイルサイズ確認
        file_size = Path(csv_file).stat().st_size
        print(f"📊 File size: {file_size:,} bytes")
        
        # CSVファイルをアップロード
        try:
            with open(csv_file, 'rb') as f:
                files = {
                    'file': (csv_file, f, 'text/csv')
                }
                
                # メタデータ
                data = {
                    'indexing_technique': 'high_quality',
                    'process_rule': '{"mode":"automatic","rules":{"pre_processing_rules":[{"id":"remove_extra_spaces","enabled":true},{"id":"remove_urls_emails","enabled":false}],"segmentation":{"separator":"\\n","max_tokens":1000}}}',
                    'duplicate_removal': 'true'
                }
                
                url = f"{api_url}/datasets/{dataset_id}/document/create_by_file"
                response = requests.post(url, headers=headers, files=files, data=data)
                
                if response.status_code in [200, 201]:
                    result = response.json()
                    print("✅ Successfully uploaded CSV to Dify!")
                    print(f"   Document ID: {result.get('document', {}).get('id', 'N/A')}")
                    
                    # GitHub Actions サマリー
                    summary_file = os.environ.get('GITHUB_STEP_SUMMARY')
                    if summary_file:
                        with open(summary_file, 'w') as sf:
                            sf.write("# 📊 CSV Upload to Dify\n\n")
                            sf.write("| Item | Value |\n")
                            sf.write("|------|-------|\n")
                            sf.write(f"| ✅ Status | Success |\n")
                            sf.write(f"| 📁 File | `{csv_file}` |\n")
                            sf.write(f"| 📊 Size | {file_size:,} bytes |\n")
                            sf.write(f"| 🆔 Document ID | `{result.get('document', {}).get('id', 'N/A')}` |\n")
                            sf.write(f"| 📚 Dataset | `{dataset_id}` |\n")
                            sf.write(f"| 🔗 Commit | `{os.environ.get('GITHUB_SHA', 'unknown')[:7]}` |\n")
                
                else:
                    print(f"❌ Failed to upload CSV")
                    print(f"   Status Code: {response.status_code}")
                    print(f"   Response: {response.text[:500]}")
                    
                    summary_file = os.environ.get('GITHUB_STEP_SUMMARY')
                    if summary_file:
                        with open(summary_file, 'w') as sf:
                            sf.write("# ❌ CSV Upload Failed\n\n")
                            sf.write(f"**Error:** {response.status_code} - {response.text[:200]}\n\n")
                            sf.write(f"**File:** `{csv_file}`\n")
                    
                    exit(1)
                    
        except Exception as e:
            print(f"❌ Error uploading CSV: {str(e)}")
            exit(1)
        
        print("🎉 Upload completed successfully!")
        EOF
